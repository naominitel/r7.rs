(define (assert-false c)
  (assert (eq? c #f)))

(assert (boolean? #t))
(assert (boolean? #f))
(assert-false (boolean? (list)))
(assert-false (boolean? (cons 1 2)))
(assert-false (boolean? list))
(assert-false (boolean? (quote foo)))
(assert-false (boolean? 1))

(assert (null? (list)))
(assert (null? (cdr (list 1))))
(assert-false (null? #f))
(assert-false (null? (cons 1 2)))
(assert-false (null? (cdr (list 1 2))))
(assert-false (null? list))
(assert-false (null? (quote foo)))
(assert-false (null? 1))

(assert (pair? (cons 1 2)))
(assert (pair? (list 1 2)))
(assert (pair? (cdr (list 1 2))))
(assert-false (pair? #f))
(assert-false (pair? (list)))
(assert-false (pair? list))
(assert-false (pair? (quote foo)))
(assert-false (pair? 1))

(assert (procedure? list))
(assert (procedure? assert-false))
(assert (procedure? (lambda (x) x)))
(assert-false (procedure? #f))
(assert-false (procedure? (list)))
(assert-false (procedure? (cons 1 2)))
(assert-false (procedure? (quote foo)))
(assert-false (procedure? 1))

(assert (symbol? (quote foo)))
(assert-false (symbol? #f))
(assert-false (symbol? (list)))
(assert-false (symbol? (cons 1 2)))
(assert-false (symbol? list))
(assert-false (symbol? 1))

(assert (number? 1))
(assert-false (number? #f))
(assert-false (number? (list)))
(assert-false (number? (cons 1 2)))
(assert-false (number? list))
(assert-false (number? (quote foo)))
